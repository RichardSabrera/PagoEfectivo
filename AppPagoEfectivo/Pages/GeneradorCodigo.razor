
@page "/generadorcodigo"

@using Microsoft.Extensions.Configuration;
@using System.Text
@using Newtonsoft.Json
@using System.Globalization;
@using System.Text.RegularExpressions;
@using Domain.Entities;
@using System.IO
@inject IHttpClientFactory ClientFactory

<h1>GeneradorCodigo</h1>

<div class="form-group">
    <label for="exampleInputEmail1">Email</label>
    <input type="email" class="form-control" placeholder="Ingrese su email" @bind-value="@email">
</div>
<div class="form-group">
    <label for="exampleInputPassword1">Nombres</label>
    <input type="text" class="form-control" placeholder="Ingrese sus nombres" @bind-value="@name">
</div>

<button class="btn btn-primary" @onclick="OnInitializedAsync">Generar</button>
<br />

@if (!_isvalid)
{
<div class="alert alert-danger" role="alert">
    Ingrese un Email valido.
</div>      }

@if (!_isvalidName)
{
<div class="alert alert-danger" role="alert">
    Ingrese el nombre.
</div>}

@if (!String.IsNullOrEmpty(_message))
{
<div class="alert alert-primary" role="alert">@_message</div>}



@code { private string name { get; set; }
            private string email { get; set; }
            private static string _message = string.Empty;
            private bool shouldRender;
            private bool _isvalid = true;
            private bool _isvalidName = true;


            protected override bool ShouldRender() => shouldRender;

            private async Task OnInitializedAsync()
            {
                var config = new ConfigurationBuilder()
                        .SetBasePath(Directory.GetCurrentDirectory())
                        .AddJsonFile("appsettings.json").Build();
                try
                {
                    if (IsValidEmail(email))
                    {
                        if (!string.IsNullOrEmpty(name))
                        {
                            _isvalid = true;
                            _isvalidName = true;
                            var request = new HttpRequestMessage(HttpMethod.Post, config["URL_API"].ToString() + $"GenerateCode");
                            var client = ClientFactory.CreateClient();

                            request.Content = new StringContent(JsonConvert.SerializeObject(new Client() { Name = name, Email = email }), Encoding.UTF8, "application/json");

                            var response = await client.SendAsync(request);

                            if (response.IsSuccessStatusCode)
                            {
                                using var responseStream = await response.Content.ReadAsStreamAsync();
                                ResponseCustom _response = await System.Text.Json.JsonSerializer.DeserializeAsync<ResponseCustom>(responseStream);
                                _message = _response.message.ToString();
                            }
                        }
                        else
                        {
                            _isvalid = true;
                            _isvalidName = false;
                        }
                    }
                    else
                    {
                        _isvalid = false;
                    }
                    shouldRender = true;
                }
                catch (Exception ex)
                {
                    throw;
                }

            }


            public static bool IsValidEmail(string email)
            {
                if (string.IsNullOrWhiteSpace(email))
                    return false;

                try
                {
                    // Normalize the domain
                    email = Regex.Replace(email, @"(@)(.+)$", DomainMapper,
                                          RegexOptions.None, TimeSpan.FromMilliseconds(200));

                    // Examines the domain part of the email and normalizes it.
                    string DomainMapper(Match match)
                    {
                        // Use IdnMapping class to convert Unicode domain names.
                        var idn = new IdnMapping();

                        // Pull out and process domain name (throws ArgumentException on invalid)
                        string domainName = idn.GetAscii(match.Groups[2].Value);

                        return match.Groups[1].Value + domainName;
                    }
                }
                catch (RegexMatchTimeoutException e)
                {
                    return false;
                }
                catch (ArgumentException e)
                {
                    return false;
                }

                try
                {
                    return Regex.IsMatch(email,
                        @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
                        RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
                }
                catch (RegexMatchTimeoutException)
                {
                    return false;
                }
            } }
